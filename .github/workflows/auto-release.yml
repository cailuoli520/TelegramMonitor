name: Build & Auto Release (Framework-dependent)

on:
  push:
    branches:
      - main
      - test
      - ads
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - '.editorconfig'
  workflow_dispatch: 

permissions:
  contents: write
  actions: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "linux-64"
            rid: "linux-x64"
            artifact_name: "TelegramMonitor-linux-64.zip"
          - name: "linux-arm64"
            rid: "linux-arm64"
            artifact_name: "TelegramMonitor-linux-arm64.zip"
          - name: "osx-64"
            rid: "osx-x64"
            artifact_name: "TelegramMonitor-osx-64.zip"
          - name: "osx-arm64"
            rid: "osx-arm64"
            artifact_name: "TelegramMonitor-osx-arm64.zip"
          - name: "windows-32"
            rid: "win-x86"
            artifact_name: "TelegramMonitor-windows-32.zip"
          - name: "windows-64"
            rid: "win-x64"
            artifact_name: "TelegramMonitor-windows-64.zip"
          - name: "windows-arm64"
            rid: "win-arm64"
            artifact_name: "TelegramMonitor-windows-arm64.zip"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.101'

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Get Version
        id: version
        shell: bash
        run: |
          VERSION=$(grep -oPm1 "(?<=<Version>)[^<]+" **/*.csproj 2>/dev/null) || VERSION=$(date +'%Y.%m.%d.%H%M')
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Publish (.NET, framework-dependent)
        run: |
          if ! dotnet restore; then
            echo "::error::Restore failed"
            exit 1
          fi

          # 统一只打单文件，不使用 ReadyToRun
          PUBLISH_ARGS="--configuration Release -r ${{ matrix.rid }} -o out/${{ matrix.rid }} /p:PublishSingleFile=true"
          if ! dotnet publish $PUBLISH_ARGS; then
            echo "::error::Publish failed"
            exit 1
          fi

          cd out/${{ matrix.rid }}
          if ! zip -r ../${{ matrix.artifact_name }} .; then
            echo "::error::Zip failed"
            exit 1
          fi
          cd ../..

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: out/${{ matrix.artifact_name }}
          retention-days: 1
          
